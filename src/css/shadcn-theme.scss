// shadcn/ui inspired theme for Quasar components
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

// CSS Variables for shadcn/ui theme
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --muted: 210 40% 96%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96%;
  --accent-foreground: 222.2 84% 4.9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 222.2 84% 4.9%;
  --radius: 0.5rem;

  // Semantic colors for notifications, dialogs, etc.
  --success: 142 76% 36%; // Green
  --success-foreground: 355.7 100% 97.3%;
  --warning: 48 96% 53%; // Yellow/Orange
  --warning-foreground: 20 14.3% 4.1%;
  --info: 198 93% 60%; // Blue
  --info-foreground: 355.7 100% 97.3%;
  --error: 0 84.2% 60.2%; // Red (same as destructive)
  --error-foreground: 210 40% 98%;
}

.dark {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;
  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;
  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;
  --primary: 210 40% 98%;
  --primary-foreground: 222.2 47.4% 11.2%;
  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;
  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;
  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;
  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;
  --ring: 212.7 26.8% 83.9%;

  // Dark mode semantic colors
  --success: 142 76% 45%; // Slightly brighter green
  --success-foreground: 355.7 100% 97.3%;
  --warning: 48 96% 60%; // Brighter yellow
  --warning-foreground: 20 14.3% 4.1%;
  --info: 198 93% 70%; // Brighter blue
  --info-foreground: 355.7 100% 97.3%;
  --error: 0 62.8% 45%; // Adjusted red for dark mode
  --error-foreground: 210 40% 98%;
}

// Override Quasar component styles with shadcn/ui aesthetics
.q-card {
  background-color: hsl(var(--card)) !important;
  color: hsl(var(--card-foreground)) !important;
  border: 1px solid hsl(var(--border)) !important;
  border-radius: calc(var(--radius) + 2px) !important;
  box-shadow:
    0 1px 3px 0 rgb(0 0 0 / 0.1),
    0 1px 2px -1px rgb(0 0 0 / 0.1) !important;
  transition: all 0.2s ease-in-out !important;

  &:hover {
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1) !important;
  }
}

.q-input {
  .q-field__control {
    background-color: hsl(var(--background)) !important;
    border-color: hsl(var(--border)) !important;
    border-radius: var(--radius) !important;
    transition: all 0.2s ease-in-out !important;

    &:hover {
      border-color: hsl(var(--accent-foreground)) !important;
    }

    &.q-field__control--focused {
      border-color: hsl(var(--ring)) !important;
      box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2) !important;
    }
  }

  .q-field__native {
    color: hsl(var(--foreground)) !important;
    font-family: 'Inter', sans-serif !important;
    font-weight: 400 !important;
  }

  .q-field__label {
    color: hsl(var(--muted-foreground)) !important;
    font-family: 'Inter', sans-serif !important;
    font-weight: 400 !important;
  }

  &.q-field--outlined .q-field__control {
    &::before {
      border-color: hsl(var(--border)) !important;
    }

    &:hover::before {
      border-color: hsl(var(--accent-foreground)) !important;
    }

    &::after {
      border-color: hsl(var(--ring)) !important;
    }
  }
}

.q-btn {
  font-family: 'Inter', sans-serif !important;
  font-weight: 500 !important;
  border-radius: var(--radius) !important;
  transition: all 0.2s ease-in-out !important;
  text-transform: none !important;

  &.bg-primary {
    background-color: hsl(var(--primary)) !important;
    color: hsl(var(--primary-foreground)) !important;

    &:hover {
      background-color: hsl(var(--primary) / 0.9) !important;
    }

    &:focus {
      box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2) !important;
    }
  }

  &.bg-secondary {
    background-color: hsl(var(--secondary)) !important;
    color: hsl(var(--secondary-foreground)) !important;

    &:hover {
      background-color: hsl(var(--secondary) / 0.8) !important;
    }
  }

  &.text-primary {
    color: hsl(var(--primary)) !important;

    &:hover {
      color: hsl(var(--primary) / 0.9) !important;
      background-color: hsl(var(--accent)) !important;
    }
  }
}

// Custom button variants
.btn-primary {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius);
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  background-color: hsl(var(--primary)) !important;
  color: hsl(var(--primary-foreground)) !important;
  padding: 0.5rem 1rem !important;
  border: none;
  cursor: pointer;

  &:hover {
    background-color: hsl(var(--primary) / 0.9) !important;
  }

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring)) !important;
  }

  &:disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.btn-secondary {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius);
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  background-color: hsl(var(--secondary)) !important;
  color: hsl(var(--secondary-foreground)) !important;
  padding: 0.5rem 1rem !important;
  border: none;
  cursor: pointer;

  &:hover {
    background-color: hsl(var(--secondary) / 0.8) !important;
  }

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring)) !important;
  }

  &:disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

.btn-outline {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius);
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  border: 1px solid hsl(var(--border)) !important;
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
  padding: 0.5rem 1rem !important;
  cursor: pointer;

  &:hover {
    background-color: hsl(var(--accent)) !important;
    color: hsl(var(--accent-foreground)) !important;
  }

  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring)) !important;
  }

  &:disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

// Q-Tabs Component
.q-tabs {
  background-color: transparent !important;

  .q-tab {
    color: hsl(var(--muted-foreground)) !important;
    border-radius: calc(var(--radius) - 2px) !important;
    transition: all 0.2s ease-in-out !important;

    &.q-tab--active {
      color: hsl(var(--foreground)) !important;
      background-color: hsl(var(--muted) / 0.5) !important;
    }

    &:hover {
      color: hsl(var(--foreground)) !important;
      background-color: hsl(var(--muted) / 0.3) !important;
    }
  }

  .q-tabs__content {
    .q-tab__indicator {
      background-color: hsl(var(--primary)) !important;
      height: 2px !important;
      border-radius: 1px !important;
    }
  }
}

// Override body background
body {
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

// Global page styling
.q-page {
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

// Global text color utilities
.text-foreground {
  color: hsl(var(--foreground)) !important;
}

.text-muted {
  color: hsl(var(--muted-foreground)) !important;
}

.text-muted-foreground {
  color: hsl(var(--muted-foreground)) !important;
}

.text-primary-shadcn {
  color: hsl(var(--primary)) !important;
}

.text-secondary-shadcn {
  color: hsl(var(--muted-foreground)) !important;
}

// Global background utilities
.bg-background {
  background-color: hsl(var(--background)) !important;
}

.bg-card {
  background-color: hsl(var(--card)) !important;
}

.bg-muted {
  background-color: hsl(var(--muted)) !important;
}

// Stats cards global styling
.stats-card {
  transition: all 0.2s ease-in-out !important;
  cursor: pointer !important;

  &:hover {
    transform: translateY(-2px) !important;
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1) !important;
  }
}

// Stats icons global styling
.stats-icon {
  color: hsl(var(--muted-foreground)) !important;
  transition: all 0.2s ease-in-out !important;
}

.stats-card:hover .stats-icon {
  color: hsl(var(--foreground)) !important;
  transform: scale(1.05) !important;
}

// Global typography overrides
.text-h1,
.text-h2,
.text-h3,
.text-h4,
.text-h5,
.text-h6 {
  color: hsl(var(--foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

.text-subtitle1,
.text-subtitle2 {
  color: hsl(var(--muted-foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

.text-body1,
.text-body2 {
  color: hsl(var(--foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

.text-caption {
  color: hsl(var(--muted-foreground)) !important;
  font-family: 'Inter', sans-serif !important;
}

// Typography overrides
.text-h5 {
  font-family: 'Inter', sans-serif !important;
  font-weight: 600 !important;
  color: hsl(var(--foreground)) !important;
}

.text-h6 {
  font-family: 'Inter', sans-serif !important;
  font-weight: 600 !important;
  color: hsl(var(--foreground)) !important;
}

// Custom utility classes for shadcn/ui consistency
.shadcn-card {
  background-color: hsl(var(--card));
  color: hsl(var(--card-foreground));
  border: 1px solid hsl(var(--border));
  border-radius: calc(var(--radius) + 2px);
  box-shadow:
    0 1px 3px 0 rgb(0 0 0 / 0.1),
    0 1px 2px -1px rgb(0 0 0 / 0.1);
}

.shadcn-input {
  background-color: hsl(var(--background));
  border: 1px solid hsl(var(--border));
  border-radius: var(--radius);
  color: hsl(var(--foreground));
  font-family: 'Inter', sans-serif;

  &:focus {
    border-color: hsl(var(--ring));
    box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2);
    outline: none;
  }

  &::placeholder {
    color: hsl(var(--muted-foreground));
  }
}

// Link styles
.shadcn-link {
  color: hsl(var(--primary));
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease-in-out;

  &:hover {
    color: hsl(var(--primary) / 0.8);
    text-decoration: underline;
  }
}

// Override Quasar's dark mode
.q-dark {
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
}

// Global icon theming - make all icons follow the theme
.q-icon {
  transition: color 0.2s ease-in-out !important;

  // Default icon colors based on theme
  &:not([class*='text-']):not([class*='color-']) {
    color: hsl(var(--muted-foreground)) !important;
  }

  // Primary icons
  &.text-primary,
  &[color='primary'] {
    color: hsl(var(--primary)) !important;
  }

  // Secondary icons
  &.text-secondary,
  &[color='secondary'] {
    color: hsl(var(--muted-foreground)) !important;
  }

  // Positive/success icons
  &.text-positive,
  &[color='positive'] {
    color: hsl(142, 76%, 36%) !important;
  }

  // Negative/error icons
  &.text-negative,
  &[color='negative'] {
    color: hsl(var(--destructive)) !important;
  }

  // Info icons
  &.text-info,
  &[color='info'] {
    color: hsl(198, 93%, 60%) !important;
  }

  // Warning icons
  &.text-warning,
  &[color='warning'] {
    color: hsl(48, 96%, 53%) !important;
  }

  // Accent icons
  &.text-accent,
  &[color='accent'] {
    color: hsl(var(--accent-foreground)) !important;
  }

  // Theme-aware icon classes
  &.text-foreground {
    color: hsl(var(--foreground)) !important;
  }

  &.text-muted {
    color: hsl(var(--muted-foreground)) !important;
  }

  // Dark mode specific adjustments
  .dark & {
    &.text-secondary,
    &[color='secondary'] {
      color: hsl(215, 20.2%, 65.1%) !important;
    }

    &.text-positive,
    &[color='positive'] {
      color: hsl(142, 76%, 45%) !important; // Slightly brighter green for dark mode
    }

    &.text-info,
    &[color='info'] {
      color: hsl(198, 93%, 70%) !important; // Brighter blue for dark mode
    }
  }
}

// Toolbar and header icons
.q-toolbar .q-icon,
.q-header .q-icon {
  color: hsl(var(--foreground)) !important;

  &:hover {
    color: hsl(var(--primary)) !important;
  }
}

// Button icons inherit button colors
.q-btn .q-icon {
  color: inherit !important;
}

// Card icons get subtle styling
.q-card .q-icon:not(.q-btn .q-icon) {
  color: hsl(var(--muted-foreground)) !important;

  &:hover {
    color: hsl(var(--foreground)) !important;
  }
}

// Notification overrides for shadcn/ui style
.q-notification {
  border-radius: var(--radius) !important;
  border: 2px solid !important;
  font-family: 'Inter', sans-serif !important;
  font-weight: 500 !important;
  box-shadow:
    0 4px 6px -1px rgb(0 0 0 / 0.1),
    0 2px 4px -2px rgb(0 0 0 / 0.1) !important;
  min-width: 300px !important;

  // Default notification styling - neutral card background
  background-color: hsl(var(--card)) !important;
  color: hsl(var(--card-foreground)) !important;
  border-color: hsl(var(--border)) !important;

  // Override for bg-positive class (success notifications) - only color the icon
  &.bg-positive {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--success)) !important;
    }
  }

  // Override for bg-negative class (error notifications) - only color the icon
  &.bg-negative {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--error)) !important;
    }
  }

  // Override for bg-warning class (warning notifications) - only color the icon
  &.bg-warning {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--warning)) !important;
    }
  }

  // Override for bg-info class (info notifications) - only color the icon
  &.bg-info {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--info)) !important;
    }
  }

  // Success notifications - only color the icon (legacy modifier class support)
  &--positive {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--success)) !important;
    }
  }

  // Error notifications - only color the icon (legacy modifier class support)
  &--negative {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--error)) !important;
    }
  }

  // Warning notifications - only color the icon (legacy modifier class support)
  &--warning {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--warning)) !important;
    }
  }

  // Info notifications - only color the icon (legacy modifier class support)
  &--info {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border-color: hsl(var(--border)) !important;

    .q-icon {
      color: hsl(var(--info)) !important;
    }
  }

  // Default icon color
  .q-icon {
    color: hsl(var(--muted-foreground)) !important;
  }
}

// Dialog overrides for shadcn/ui style
.q-dialog {
  .q-card {
    background-color: hsl(var(--card)) !important;
    color: hsl(var(--card-foreground)) !important;
    border: 1px solid hsl(var(--border)) !important;
    border-radius: calc(var(--radius) + 4px) !important;
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25) !important;
  }

  .q-card-section {
    font-family: 'Inter', sans-serif !important;
  }

  .q-card__actions {
    .q-btn {
      font-family: 'Inter', sans-serif !important;
      font-weight: 500 !important;
    }
  }
}

// Alert/Banner components
.q-banner {
  border-radius: var(--radius) !important;
  border: 1px solid hsl(var(--border)) !important;
  font-family: 'Inter', sans-serif !important;

  &--positive {
    background-color: hsl(var(--success) / 0.1) !important;
    color: hsl(var(--success)) !important;
    border-color: hsl(var(--success) / 0.3) !important;
  }

  &--negative {
    background-color: hsl(var(--error) / 0.1) !important;
    color: hsl(var(--error)) !important;
    border-color: hsl(var(--error) / 0.3) !important;
  }

  &--warning {
    background-color: hsl(var(--warning) / 0.1) !important;
    color: hsl(var(--warning)) !important;
    border-color: hsl(var(--warning) / 0.3) !important;
  }

  &--info {
    background-color: hsl(var(--info) / 0.1) !important;
    color: hsl(var(--info)) !important;
    border-color: hsl(var(--info) / 0.3) !important;
  }
}

// Progress bars
.q-linear-progress {
  background-color: hsl(var(--muted)) !important;

  .q-linear-progress__track {
    background-color: hsl(var(--primary)) !important;

    &.bg-positive {
      background-color: hsl(var(--success)) !important;
    }

    &.bg-negative {
      background-color: hsl(var(--error)) !important;
    }

    &.bg-warning {
      background-color: hsl(var(--warning)) !important;
    }

    &.bg-info {
      background-color: hsl(var(--info)) !important;
    }
  }
}

// Circular progress
.q-circular-progress {
  .q-circular-progress__text {
    color: hsl(var(--foreground)) !important;
    font-family: 'Inter', sans-serif !important;
    font-weight: 500 !important;
    font-size: 0.875rem !important;
  }

  // Track (background circle) styling
  .q-circular-progress__track {
    stroke: hsl(var(--border)) !important;
    opacity: 0.3 !important;
  }

  // Style the actual SVG circles
  .q-circular-progress__circle {
    stroke-linecap: round !important;
    transition: stroke-dashoffset 0.3s ease-in-out !important;
  }

  // Color-specific styling for Quasar's color prop
  &--primary .q-circular-progress__circle {
    stroke: hsl(var(--primary)) !important;
  }

  &--secondary .q-circular-progress__circle {
    stroke: hsl(var(--secondary-foreground)) !important;
  }

  &--positive .q-circular-progress__circle {
    stroke: hsl(var(--success)) !important;
  }

  &--negative .q-circular-progress__circle {
    stroke: hsl(var(--destructive)) !important;
  }

  &--warning .q-circular-progress__circle {
    stroke: hsl(var(--warning)) !important;
  }

  &--info .q-circular-progress__circle {
    stroke: hsl(var(--info)) !important;
  }

  // Additional text color class overrides
  &.text-primary .q-circular-progress__circle {
    stroke: hsl(var(--primary)) !important;
  }

  &.text-secondary .q-circular-progress__circle {
    stroke: hsl(var(--secondary-foreground)) !important;
  }

  &.text-positive .q-circular-progress__circle {
    stroke: hsl(var(--success)) !important;
  }

  &.text-negative .q-circular-progress__circle {
    stroke: hsl(var(--destructive)) !important;
  }

  &.text-warning .q-circular-progress__circle {
    stroke: hsl(var(--warning)) !important;
  }

  &.text-info .q-circular-progress__circle {
    stroke: hsl(var(--info)) !important;
  }

  // Handle track colors for common Quasar color names
  &.text-grey-3 .q-circular-progress__track,
  .text-grey-3 {
    stroke: hsl(var(--border)) !important;
    opacity: 0.3 !important;
  }

  // Ensure track is visible with consistent styling
  svg circle:first-child {
    stroke: hsl(var(--border)) !important;
    opacity: 0.3 !important;
  }

  // Default fallback for any track color issues
  .q-circular-progress__track:not([class*='text-']) {
    stroke: hsl(var(--border)) !important;
    opacity: 0.3 !important;
  }

  // Indeterminate state styling
  &--indeterminate .q-circular-progress__circle {
    animation: q-circular-progress-rotate 2s linear infinite !important;
  }

  // Dark mode adjustments
  .dark & {
    .q-circular-progress__track,
    svg circle:first-child {
      stroke: hsl(var(--border)) !important;
      opacity: 0.4 !important;
    }

    // Override hardcoded rgba(0,0,0,0.1) track colors in dark mode
    // This specifically targets elements that use the problematic hardcoded color
    svg circle[stroke='rgba(0,0,0,0.1)'],
    .q-circular-progress__track[stroke='rgba(0,0,0,0.1)'] {
      stroke: hsl(var(--border)) !important;
      opacity: 0.6 !important;
    }

    // Additional fallback for any SVG circles with very low opacity black colors
    svg circle[stroke*='rgba(0,0,0,0.1)'],
    svg circle[stroke*='rgba(0, 0, 0, 0.1)'] {
      stroke: hsl(var(--border)) !important;
      opacity: 0.6 !important;
    }

    // Force override for small circular progress that might have hardcoded dark colors
    // Target small size circular progress specifically
    &[style*='width: 30px'],
    &[style*='height: 30px'] {
      .q-circular-progress__track,
      svg circle:first-child {
        stroke: hsl(var(--border)) !important;
        opacity: 0.6 !important;
      }
    }

    // General override for any track with very low opacity in dark mode
    svg circle:first-child {
      stroke: hsl(var(--border)) !important;
      opacity: 0.6 !important;
    }
  }
}

// Dark mode comprehensive circular progress track overrides
.dark {
  .q-circular-progress {
    // Force all SVG track circles to be visible in dark mode
    svg circle:first-child,
    .q-circular-progress__track {
      stroke: hsl(var(--border)) !important;
      opacity: 0.7 !important;
    }

    // Override any potential inline styles for track color
    svg circle:not(.q-circular-progress__circle) {
      stroke: hsl(var(--border)) !important;
      opacity: 0.7 !important;
    }

    // Force all track elements to use proper dark mode colors
    svg circle.q-circular-progress__track,
    .q-circular-progress__track {
      stroke: hsl(var(--border)) !important;
      opacity: 0.7 !important;
      color: hsl(var(--border)) !important;
    }

    // Specific targeting for small progress indicators
    &[style*='30px'] {
      svg circle:first-child,
      svg circle.q-circular-progress__track {
        stroke: hsl(var(--border)) !important;
        opacity: 0.8 !important;
      }
    }

    // Override currentColor usage in dark mode for track elements
    svg circle[stroke='currentColor']:first-child {
      stroke: hsl(var(--border)) !important;
      opacity: 0.7 !important;
    }
  }

  // Global override for any Quasar color utility classes that might cause issues
  [class*='text-rgba'] {
    &.q-circular-progress__track {
      stroke: hsl(var(--border)) !important;
      opacity: 0.7 !important;
      color: hsl(var(--border)) !important;
    }
  }
}

// Chips
.q-chip {
  background-color: hsl(var(--muted)) !important;
  color: hsl(var(--muted-foreground)) !important;
  border-radius: calc(var(--radius) - 2px) !important;
  font-family: 'Inter', sans-serif !important;

  &--positive {
    background-color: hsl(var(--success) / 0.1) !important;
    color: hsl(var(--success)) !important;
  }

  &--negative {
    background-color: hsl(var(--error) / 0.1) !important;
    color: hsl(var(--error)) !important;
  }

  &--warning {
    background-color: hsl(var(--warning) / 0.1) !important;
    color: hsl(var(--warning)) !important;
  }

  &--info {
    background-color: hsl(var(--info) / 0.1) !important;
    color: hsl(var(--info)) !important;
  }
}

// Badges
.q-badge {
  background-color: hsl(var(--primary)) !important;
  color: hsl(var(--primary-foreground)) !important;
  font-family: 'Inter', sans-serif !important;
  border-radius: calc(var(--radius) - 2px) !important;

  &--positive {
    background-color: hsl(var(--success)) !important;
    color: hsl(var(--success-foreground)) !important;
  }

  &--negative {
    background-color: hsl(var(--error)) !important;
    color: hsl(var(--error-foreground)) !important;
  }

  &--warning {
    background-color: hsl(var(--warning)) !important;
    color: hsl(var(--warning-foreground)) !important;
  }

  &--info {
    background-color: hsl(var(--info)) !important;
    color: hsl(var(--info-foreground)) !important;
  }
}

// Enhanced Button Loading States with proper spinner visibility
.q-btn {
  font-family: 'Geist', sans-serif !important;
  font-weight: 500 !important;

  // Loading state - comprehensive fix for spinner visibility
  &.q-btn--loading {
    position: relative !important;

    // Hide button content when loading
    .q-btn__content {
      opacity: 0 !important;
    }

    // Position spinner properly
    .q-spinner {
      position: absolute !important;
      top: 50% !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
      z-index: 2 !important;
    }

    // Default white spinner for most buttons
    .q-spinner {
      color: white !important;
    }

    // Primary button loading states
    &.bg-primary,
    &[color='primary'] {
      .q-spinner {
        color: hsl(var(--primary-foreground)) !important;
      }
    }

    // Secondary button loading states
    &.bg-secondary,
    &[color='secondary'] {
      .q-spinner {
        color: hsl(var(--secondary-foreground)) !important;
      }
    }

    // Positive/Success button loading
    &.bg-positive,
    &[color='positive'] {
      .q-spinner {
        color: white !important;
      }
    }

    // Negative/Error button loading
    &.bg-negative,
    &[color='negative'] {
      .q-spinner {
        color: white !important;
      }
    }

    // Warning button loading
    &.bg-warning,
    &[color='warning'] {
      .q-spinner {
        color: white !important;
      }
    }

    // Info button loading
    &.bg-info,
    &[color='info'] {
      .q-spinner {
        color: white !important;
      }
    }

    // Outline buttons - use theme colors
    &.q-btn--outline {
      .q-spinner {
        color: hsl(var(--primary)) !important;
      }

      &[color='positive'] .q-spinner {
        color: hsl(142, 76%, 36%) !important;
      }

      &[color='negative'] .q-spinner {
        color: hsl(0, 84%, 60%) !important;
      }

      &[color='warning'] .q-spinner {
        color: hsl(35, 91%, 62%) !important;
      }

      &[color='info'] .q-spinner {
        color: hsl(217, 91%, 60%) !important;
      }
    }

    // Flat buttons - use theme colors
    &.q-btn--flat {
      .q-spinner {
        color: hsl(var(--primary)) !important;
      }

      &[color='positive'] .q-spinner {
        color: hsl(142, 76%, 36%) !important;
      }

      &[color='negative'] .q-spinner {
        color: hsl(0, 84%, 60%) !important;
      }

      &[color='warning'] .q-spinner {
        color: hsl(35, 91%, 62%) !important;
      }

      &[color='info'] .q-spinner {
        color: hsl(217, 91%, 60%) !important;
      }
    }

    // Dark mode adjustments
    .dark & {
      // For dark mode, ensure contrast on dark backgrounds
      &.bg-primary .q-spinner {
        color: hsl(var(--primary-foreground)) !important;
      }

      &.bg-secondary .q-spinner {
        color: hsl(var(--secondary-foreground)) !important;
      }

      // Outline and flat buttons in dark mode
      &.q-btn--outline .q-spinner,
      &.q-btn--flat .q-spinner {
        color: hsl(var(--primary)) !important;
      }
    }
  }
}

// Enhanced spinner styling with proper contrast everywhere
.q-spinner {
  color: hsl(var(--primary)) !important;

  // When inside a loading button, use appropriate colors
  .q-btn--loading & {
    // Default to white for most colored buttons
    color: white !important;
  }

  // When inside outline or flat buttons, use theme colors
  .q-btn--outline & {
    color: hsl(var(--primary)) !important;
  }

  .q-btn--flat & {
    color: hsl(var(--primary)) !important;
  }

  // Standalone spinner color variants
  &[color='primary'] {
    color: hsl(var(--primary)) !important;
  }

  &[color='secondary'] {
    color: hsl(var(--secondary)) !important;
  }

  &[color='positive'] {
    color: hsl(142, 76%, 36%) !important;
  }

  &[color='negative'] {
    color: hsl(0, 84%, 60%) !important;
  }

  &[color='warning'] {
    color: hsl(35, 91%, 62%) !important;
  }

  &[color='info'] {
    color: hsl(217, 91%, 60%) !important;
  }
}

// Position utilities
.absolute {
  position: absolute !important;
}

.relative {
  position: relative !important;
}

.top-0 {
  top: 0 !important;
}

.right-0 {
  right: 0 !important;
}

.z-50 {
  z-index: 50 !important;
}

// Transition utilities
.transition-all {
  transition: all 0.2s ease-in-out !important;
}

.transition-opacity {
  transition: opacity 0.2s ease-in-out !important;
}

// Hover utilities
.hover\:bg-accent:hover {
  background-color: hsl(var(--accent)) !important;
}

.hover\:opacity-80:hover {
  opacity: 0.8 !important;
}

// Layout container utilities
.q-layout {
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
}

.q-page-container {
  background-color: hsl(var(--background)) !important;
}

// Tooltip styling for popover
.bg-popover {
  background-color: hsl(var(--popover)) !important;
}

.text-popover-foreground {
  color: hsl(var(--popover-foreground)) !important;
}

.border-border {
  border-color: hsl(var(--border)) !important;
}

// Spacing utilities (inspired by Tailwind)
.space-y-2 > * + * {
  margin-top: 0.5rem !important;
}

.space-y-4 > * + * {
  margin-top: 1rem !important;
}

.space-y-6 > * + * {
  margin-top: 1.5rem !important;
}

.space-x-2 > * + * {
  margin-left: 0.5rem !important;
}

.space-x-4 > * + * {
  margin-left: 1rem !important;
}

// Grid utilities
.grid {
  display: grid !important;
}

.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr)) !important;
}

.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr)) !important;
}

.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr)) !important;
}

.grid-cols-4 {
  grid-template-columns: repeat(4, minmax(0, 1fr)) !important;
}

.gap-2 {
  gap: 0.5rem !important;
}

.gap-4 {
  gap: 1rem !important;
}

.gap-6 {
  gap: 1.5rem !important;
}

// Flexbox utilities
.flex {
  display: flex !important;
}

.flex-col {
  flex-direction: column !important;
}

.items-center {
  align-items: center !important;
}

.justify-center {
  justify-content: center !important;
}

.justify-between {
  justify-content: space-between !important;
}

// Sizing utilities
.w-full {
  width: 100% !important;
}

.h-full {
  height: 100% !important;
}

.min-h-screen {
  min-height: 100vh !important;
}

.max-w-md {
  max-width: 28rem !important;
}

.max-w-lg {
  max-width: 32rem !important;
}

.max-w-xl {
  max-width: 36rem !important;
}

// Padding and margin utilities
.p-4 {
  padding: 1rem !important;
}

.p-6 {
  padding: 1.5rem !important;
}

.pt-0 {
  padding-top: 0 !important;
}

.mt-6 {
  margin-top: 1.5rem !important;
}

.ml-1 {
  margin-left: 0.25rem !important;
}

// Font weight utilities
.font-medium {
  font-weight: 500 !important;
}

.font-semibold {
  font-weight: 600 !important;
}

.font-bold {
  font-weight: 700 !important;
}

// Font size utilities
.text-sm {
  font-size: 0.875rem !important;
  line-height: 1.25rem !important;
}

.text-2xl {
  font-size: 1.5rem !important;
  line-height: 2rem !important;
}

// Animations for circular progress
@keyframes q-circular-progress-rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

// Ultra-aggressive dark mode fix for small circular progress
.dark .q-circular-progress[style*='font-size: 30px'] {
  // Force any circle within a 30px circular progress to be visible
  svg circle:first-child,
  svg circle.q-circular-progress__track {
    stroke: hsl(var(--border)) !important;
    opacity: 0.8 !important;
    color: hsl(var(--border)) !important;
  }

  // Override any text color classes that affect currentColor
  .text-rgba\(0\,0\,0\,0\.1\) {
    color: hsl(var(--border)) !important;
  }
}

// Alternative approach: target by viewBox which is unique to small size
.dark .q-circular-progress svg[viewBox*='55.55555555555556'] {
  circle:first-child {
    stroke: hsl(var(--border)) !important;
    opacity: 0.8 !important;
  }
}

// Form Controls - Checkbox, Radio, Toggle overrides for shadcn/ui style
// =============================================================================

// Checkbox overrides
.q-checkbox {
  font-family: 'Inter', sans-serif !important;

  .q-checkbox__bg {
    border: 2px solid hsl(var(--border)) !important;
    border-radius: calc(var(--radius) / 2) !important;
    background-color: hsl(var(--background)) !important;
    transition: all 0.2s ease-in-out !important;
  }

  // Checkmark path styling
  .q-checkbox__truthy {
    stroke: hsl(var(--primary-foreground)) !important;
    stroke-width: 2.5px !important;
  }

  // Hover state
  &:hover .q-checkbox__bg {
    border-color: hsl(var(--accent-foreground)) !important;
  }

  // Focus state
  &:focus .q-checkbox__bg,
  &.q-checkbox--focused .q-checkbox__bg {
    border-color: hsl(var(--ring)) !important;
    box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2) !important;
  }

  // Label
  .q-checkbox__label {
    color: hsl(var(--foreground)) !important;
    font-weight: 500 !important;
  }
}

// Checked checkbox state
.q-checkbox__inner--truthy .q-checkbox__bg {
  background-color: hsl(var(--primary)) !important;
  border-color: hsl(var(--primary)) !important;
}

// Dark mode checkbox
.q-checkbox--dark {
  .q-checkbox__bg {
    border-color: hsl(var(--border)) !important;
    background-color: hsl(var(--background)) !important;
  }

  &.q-checkbox__inner--truthy .q-checkbox__bg,
  .q-checkbox__inner--truthy .q-checkbox__bg {
    background-color: hsl(var(--primary)) !important;
    border-color: hsl(var(--primary)) !important;
  }

  .q-checkbox__truthy {
    stroke: hsl(var(--primary-foreground)) !important;
  }
}

// Radio button overrides
.q-radio {
  font-family: 'Inter', sans-serif !important;

  .q-radio__bg {
    transition: all 0.2s ease-in-out !important;

    // Outer circle path
    path:first-child {
      stroke: hsl(var(--border)) !important;
      stroke-width: 2px !important;
      fill: hsl(var(--background)) !important;
    }
  }

  // Inner dot for selected state
  .q-radio__check {
    fill: transparent !important;
    transition: all 0.2s ease-in-out !important;
  }

  // Hover state
  &:hover .q-radio__bg path:first-child {
    stroke: hsl(var(--accent-foreground)) !important;
  }

  // Focus state
  &:focus .q-radio__bg,
  &.q-radio--focused .q-radio__bg {
    filter: drop-shadow(0 0 0 2px hsl(var(--ring) / 0.2)) !important;
  }

  // Label
  .q-radio__label {
    color: hsl(var(--foreground)) !important;
    font-weight: 500 !important;
  }
}

// Selected radio state
.q-radio__inner--truthy {
  .q-radio__bg {
    path:first-child {
      stroke: hsl(var(--primary)) !important;
      stroke-width: 2px !important;
    }

    .q-radio__check {
      fill: hsl(var(--primary)) !important;
    }
  }
}

// Dark mode radio
.q-radio--dark {
  .q-radio__bg path:first-child {
    stroke: hsl(var(--border)) !important;
    fill: hsl(var(--background)) !important;
  }

  &.q-radio__inner--truthy .q-radio__bg,
  .q-radio__inner--truthy .q-radio__bg {
    path:first-child {
      stroke: hsl(var(--primary)) !important;
    }

    .q-radio__check {
      fill: hsl(var(--primary)) !important;
    }
  }
}

// Toggle switch overrides
.q-toggle {
  font-family: 'Inter', sans-serif !important;

  .q-toggle__track {
    background-color: hsl(var(--muted)) !important;
    border: 2px solid hsl(var(--border)) !important;
    border-radius: 999px !important;
    transition: all 0.2s ease-in-out !important;
  }

  .q-toggle__thumb {
    background-color: hsl(var(--background)) !important;
    border: 2px solid hsl(var(--border)) !important;
    border-radius: 50% !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    transition: all 0.2s ease-in-out !important;
  }

  // Hover state
  &:hover .q-toggle__track {
    border-color: hsl(var(--accent-foreground)) !important;
  }

  // Focus state
  &:focus .q-toggle__track,
  &.q-toggle--focused .q-toggle__track {
    border-color: hsl(var(--ring)) !important;
    box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2) !important;
  }

  // Label
  .q-toggle__label {
    color: hsl(var(--foreground)) !important;
    font-weight: 500 !important;
  }
}

// Toggled state
.q-toggle__inner--truthy {
  .q-toggle__track {
    background-color: hsl(var(--primary)) !important;
    border-color: hsl(var(--primary)) !important;
  }

  .q-toggle__thumb {
    background-color: hsl(var(--primary-foreground)) !important;
    border-color: hsl(var(--primary)) !important;
  }
}

// Dark mode toggle
.q-toggle--dark {
  .q-toggle__track {
    background-color: hsl(var(--muted)) !important;
    border-color: hsl(var(--border)) !important;
  }

  .q-toggle__thumb {
    background-color: hsl(var(--background)) !important;
    border-color: hsl(var(--border)) !important;
  }

  &.q-toggle__inner--truthy .q-toggle__track,
  .q-toggle__inner--truthy .q-toggle__track {
    background-color: hsl(var(--primary)) !important;
    border-color: hsl(var(--primary)) !important;
  }

  &.q-toggle__inner--truthy .q-toggle__thumb,
  .q-toggle__inner--truthy .q-toggle__thumb {
    background-color: hsl(var(--primary-foreground)) !important;
    border-color: hsl(var(--primary)) !important;
  }
}

// Additional dark mode fixes for form controls
.dark {
  // Ensure form control backgrounds are visible
  .q-checkbox__bg,
  .q-radio__bg,
  .q-toggle__track {
    background-color: hsl(var(--background)) !important;
  }

  // Ensure selected states are clearly visible
  .q-checkbox--truthy .q-checkbox__bg,
  .q-radio--truthy .q-radio__bg,
  .q-toggle--truthy .q-toggle__track {
    background-color: hsl(var(--primary)) !important;
    border-color: hsl(var(--primary)) !important;
  }

  // Ensure checkmarks and indicators are visible
  .q-checkbox__truthy {
    stroke: hsl(var(--primary-foreground)) !important;
  }

  .q-radio--truthy .q-radio__check {
    fill: hsl(var(--primary)) !important;
  }

  .q-toggle--truthy .q-toggle__thumb {
    background-color: hsl(var(--primary-foreground)) !important;
  }
}
